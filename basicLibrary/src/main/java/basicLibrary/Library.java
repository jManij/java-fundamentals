/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basicLibrary;

import java.io.FileNotFoundException;
import java.util.*;

public class Library {
    public static void main(String[] args) throws FileNotFoundException {
        analyzeWeatherData(new int[][]{
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        });
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
        System.out.println(tally(votes));
//        System.out.println(linter("/Users/kcmanish/Code401/java-fundamentals/linter/src/main/resources/gates.js"));
    }

    public static int[] roll(int times) {
        int[] arrayOfRolls = new int[times];
        for (int i = 0; i < times; i++) {
            arrayOfRolls[i] = (int)Math.floor((Math.random() * 6) + 1);
        }
        return arrayOfRolls;
    }

    public static boolean containsDuplicates (int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    public static int calculateAverages(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum / arr.length;
    }

    public static int averageOfArraysOfArrays(int[][] arrOfArr) {
        int lowestAvg = calculateAverages(arrOfArr[0]);
        int currentAvg;

        for (int i = 1; i < arrOfArr.length; i++) {
            currentAvg = calculateAverages(arrOfArr[i]);
            if(currentAvg < lowestAvg) {
                lowestAvg = currentAvg;
            }
        }
        return lowestAvg;
    }

    public static String analyzeWeatherData(int[][] arrOfArr) {
        int Max = arrOfArr[0][0]; //Assume Max value
        int Min = arrOfArr[0][0]; // Assume min value
        HashSet<Integer> uniqueTemp = new HashSet<>(); //Holds all the unique elements in the array
        String finalString = ""; //Final string to be returned

        //Iterate through to find the minimum and max in the 2d array
        for (int i = 0; i < arrOfArr.length; i++) {
            for (int j = 0; j < arrOfArr[i].length; j++) {
                //Update min
                if (arrOfArr[i][j] < Min) {
                    Min = arrOfArr[i][j];
                }
                //Update max
                if (arrOfArr[i][j] > Max) {
                    Max = arrOfArr[i][j];
                }
                uniqueTemp.add(arrOfArr[i][j]); //Add unique temperature into hash set

            }

        }

        //Iterate from min to max to determine temperature that has not been seen
         for (int i = Min; i <= Max; i++) {
             if(!uniqueTemp.contains(i)) {
                 finalString += "Never saw temperature: " + i + "\n";
             }

         }

        return finalString;

    }



    public static String tally(List<String> votes) {
        HashMap<String, Integer> allVotesMap = new HashMap<>();
        String winner = ""; //Empty string
        int winningValue = 0; //Assume the lowest number as a winning value

        for (int i = 0; i < votes.size(); i++) {
            allVotesMap.put(votes.get(i), 0); //Initialize hashmap with keys and 0 as values
        }
        for (int i = 0; i < votes.size(); i++) {
           allVotesMap.put(votes.get(i), allVotesMap.get(votes.get(i)) + 1);
        }

        //Iterate through hashmap to find the winner
        for (String key: allVotesMap.keySet())
            if (allVotesMap.get(key) > winningValue) {
                winningValue = allVotesMap.get(key);
                winner = key + " received the most votes!";
            }

        return winner;

    }

}
